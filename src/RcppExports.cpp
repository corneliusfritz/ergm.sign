// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mat_to_map
std::unordered_map< int, std::set<int>> mat_to_map(arma::mat mat, int type, int n_actors);
RcppExport SEXP _ergm_sign_mat_to_map(SEXP matSEXP, SEXP typeSEXP, SEXP n_actorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type n_actors(n_actorsSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_to_map(mat, type, n_actors));
    return rcpp_result_gen;
END_RCPP
}
// trying_out
arma::mat trying_out(arma::mat network, int n_actors);
RcppExport SEXP _ergm_sign_trying_out(SEXP networkSEXP, SEXP n_actorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type network(networkSEXP);
    Rcpp::traits::input_parameter< int >::type n_actors(n_actorsSEXP);
    rcpp_result_gen = Rcpp::wrap(trying_out(network, n_actors));
    return rcpp_result_gen;
END_RCPP
}
// set_seed
void set_seed(double seed);
RcppExport SEXP _ergm_sign_set_seed(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type seed(seedSEXP);
    set_seed(seed);
    return R_NilValue;
END_RCPP
}
// simulate_numbers
arma::vec simulate_numbers(int min, int max, int number);
RcppExport SEXP _ergm_sign_simulate_numbers(SEXP minSEXP, SEXP maxSEXP, SEXP numberSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type min(minSEXP);
    Rcpp::traits::input_parameter< int >::type max(maxSEXP);
    Rcpp::traits::input_parameter< int >::type number(numberSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_numbers(min, max, number));
    return rcpp_result_gen;
END_RCPP
}
// arma_sample
arma::uvec arma_sample(int n, int k, arma::vec prob);
RcppExport SEXP _ergm_sign_arma_sample(SEXP nSEXP, SEXP kSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_sample(n, k, prob));
    return rcpp_result_gen;
END_RCPP
}
// sample_signed
int sample_signed(int n, arma::vec prob);
RcppExport SEXP _ergm_sign_sample_signed(SEXP nSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_signed(n, prob));
    return rcpp_result_gen;
END_RCPP
}
// simulate_networks_new
List simulate_networks_new(arma::vec& coefs, std::vector<std::string>& terms, int& n_actors, std::vector<arma::mat>& data_list, std::vector<int>& type_list, bool mh, int n_proposals, int n_proposals_burn_in, int seed, int number_networks, bool only_stats);
RcppExport SEXP _ergm_sign_simulate_networks_new(SEXP coefsSEXP, SEXP termsSEXP, SEXP n_actorsSEXP, SEXP data_listSEXP, SEXP type_listSEXP, SEXP mhSEXP, SEXP n_proposalsSEXP, SEXP n_proposals_burn_inSEXP, SEXP seedSEXP, SEXP number_networksSEXP, SEXP only_statsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type terms(termsSEXP);
    Rcpp::traits::input_parameter< int& >::type n_actors(n_actorsSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat>& >::type data_list(data_listSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type type_list(type_listSEXP);
    Rcpp::traits::input_parameter< bool >::type mh(mhSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals(n_proposalsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals_burn_in(n_proposals_burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type number_networks(number_networksSEXP);
    Rcpp::traits::input_parameter< bool >::type only_stats(only_statsSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_networks_new(coefs, terms, n_actors, data_list, type_list, mh, n_proposals, n_proposals_burn_in, seed, number_networks, only_stats));
    return rcpp_result_gen;
END_RCPP
}
// simulate_networks_stats
arma::mat simulate_networks_stats(arma::vec& coefs, std::vector<std::string>& terms, int& n_actors, std::vector<arma::mat>& data_list, std::vector<int>& type_list, bool mh, int n_proposals, int n_proposals_burn_in, int seed, int number_networks);
RcppExport SEXP _ergm_sign_simulate_networks_stats(SEXP coefsSEXP, SEXP termsSEXP, SEXP n_actorsSEXP, SEXP data_listSEXP, SEXP type_listSEXP, SEXP mhSEXP, SEXP n_proposalsSEXP, SEXP n_proposals_burn_inSEXP, SEXP seedSEXP, SEXP number_networksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type terms(termsSEXP);
    Rcpp::traits::input_parameter< int& >::type n_actors(n_actorsSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat>& >::type data_list(data_listSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type type_list(type_listSEXP);
    Rcpp::traits::input_parameter< bool >::type mh(mhSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals(n_proposalsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals_burn_in(n_proposals_burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type number_networks(number_networksSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_networks_stats(coefs, terms, n_actors, data_list, type_list, mh, n_proposals, n_proposals_burn_in, seed, number_networks));
    return rcpp_result_gen;
END_RCPP
}
// simulate_trying
List simulate_trying(arma::vec& coefs, std::vector<std::string>& terms, int& n_actors, std::vector<arma::mat>& data_list, std::vector<int>& type_list, int n_proposals, int n_proposals_burn_in, int seed, int number_networks, bool only_stats);
RcppExport SEXP _ergm_sign_simulate_trying(SEXP coefsSEXP, SEXP termsSEXP, SEXP n_actorsSEXP, SEXP data_listSEXP, SEXP type_listSEXP, SEXP n_proposalsSEXP, SEXP n_proposals_burn_inSEXP, SEXP seedSEXP, SEXP number_networksSEXP, SEXP only_statsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type terms(termsSEXP);
    Rcpp::traits::input_parameter< int& >::type n_actors(n_actorsSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat>& >::type data_list(data_listSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type type_list(type_listSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals(n_proposalsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals_burn_in(n_proposals_burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type number_networks(number_networksSEXP);
    Rcpp::traits::input_parameter< bool >::type only_stats(only_statsSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_trying(coefs, terms, n_actors, data_list, type_list, n_proposals, n_proposals_burn_in, seed, number_networks, only_stats));
    return rcpp_result_gen;
END_RCPP
}
// count_global
arma::vec count_global(arma::mat network, std::vector<std::string> terms, int n_actors, std::vector<arma::mat>& data_list, std::vector<int>& type_list);
RcppExport SEXP _ergm_sign_count_global(SEXP networkSEXP, SEXP termsSEXP, SEXP n_actorsSEXP, SEXP data_listSEXP, SEXP type_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type network(networkSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type terms(termsSEXP);
    Rcpp::traits::input_parameter< int >::type n_actors(n_actorsSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat>& >::type data_list(data_listSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type type_list(type_listSEXP);
    rcpp_result_gen = Rcpp::wrap(count_global(network, terms, n_actors, data_list, type_list));
    return rcpp_result_gen;
END_RCPP
}
// trying_again2
List trying_again2(arma::mat network, std::vector<std::string> terms, int n_actors, std::vector<arma::mat>& data_list, std::vector<int>& type_list, std::vector<int> from, std::vector<int> to, std::vector<int> change);
RcppExport SEXP _ergm_sign_trying_again2(SEXP networkSEXP, SEXP termsSEXP, SEXP n_actorsSEXP, SEXP data_listSEXP, SEXP type_listSEXP, SEXP fromSEXP, SEXP toSEXP, SEXP changeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type network(networkSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type terms(termsSEXP);
    Rcpp::traits::input_parameter< int >::type n_actors(n_actorsSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat>& >::type data_list(data_listSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type type_list(type_listSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type from(fromSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type to(toSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type change(changeSEXP);
    rcpp_result_gen = Rcpp::wrap(trying_again2(network, terms, n_actors, data_list, type_list, from, to, change));
    return rcpp_result_gen;
END_RCPP
}
// simulation_mat
List simulation_mat(arma::mat network, std::vector<std::string> terms, int n_actors, int n_proposals, int seed, int number_networks, std::vector<arma::mat>& data_list, std::vector<int>& type_list, arma::vec& coef, bool mh);
RcppExport SEXP _ergm_sign_simulation_mat(SEXP networkSEXP, SEXP termsSEXP, SEXP n_actorsSEXP, SEXP n_proposalsSEXP, SEXP seedSEXP, SEXP number_networksSEXP, SEXP data_listSEXP, SEXP type_listSEXP, SEXP coefSEXP, SEXP mhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type network(networkSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type terms(termsSEXP);
    Rcpp::traits::input_parameter< int >::type n_actors(n_actorsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals(n_proposalsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type number_networks(number_networksSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat>& >::type data_list(data_listSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type type_list(type_listSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< bool >::type mh(mhSEXP);
    rcpp_result_gen = Rcpp::wrap(simulation_mat(network, terms, n_actors, n_proposals, seed, number_networks, data_list, type_list, coef, mh));
    return rcpp_result_gen;
END_RCPP
}
// count_global_terms
arma::vec count_global_terms(arma::mat network, std::vector<std::string> terms, int n_actors, std::vector<arma::mat>& data_list, std::vector<int>& type_list);
RcppExport SEXP _ergm_sign_count_global_terms(SEXP networkSEXP, SEXP termsSEXP, SEXP n_actorsSEXP, SEXP data_listSEXP, SEXP type_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type network(networkSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type terms(termsSEXP);
    Rcpp::traits::input_parameter< int >::type n_actors(n_actorsSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat>& >::type data_list(data_listSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type type_list(type_listSEXP);
    rcpp_result_gen = Rcpp::wrap(count_global_terms(network, terms, n_actors, data_list, type_list));
    return rcpp_result_gen;
END_RCPP
}
// mle_estimation
std::vector<arma::vec> mle_estimation(arma::mat network, std::vector<std::string> terms, int n_actors, int n_proposals, int n_proposals_burn_in, int seed, int number_networks, std::vector<arma::mat>& data_list, std::vector<int>& type_list, arma::vec& beg_coef, bool mh, int max_it, double tol, bool start_with_empty_net);
RcppExport SEXP _ergm_sign_mle_estimation(SEXP networkSEXP, SEXP termsSEXP, SEXP n_actorsSEXP, SEXP n_proposalsSEXP, SEXP n_proposals_burn_inSEXP, SEXP seedSEXP, SEXP number_networksSEXP, SEXP data_listSEXP, SEXP type_listSEXP, SEXP beg_coefSEXP, SEXP mhSEXP, SEXP max_itSEXP, SEXP tolSEXP, SEXP start_with_empty_netSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type network(networkSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type terms(termsSEXP);
    Rcpp::traits::input_parameter< int >::type n_actors(n_actorsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals(n_proposalsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals_burn_in(n_proposals_burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type number_networks(number_networksSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat>& >::type data_list(data_listSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type type_list(type_listSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beg_coef(beg_coefSEXP);
    Rcpp::traits::input_parameter< bool >::type mh(mhSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type start_with_empty_net(start_with_empty_netSEXP);
    rcpp_result_gen = Rcpp::wrap(mle_estimation(network, terms, n_actors, n_proposals, n_proposals_burn_in, seed, number_networks, data_list, type_list, beg_coef, mh, max_it, tol, start_with_empty_net));
    return rcpp_result_gen;
END_RCPP
}
// mle_estimation_stepping
std::vector<arma::vec> mle_estimation_stepping(arma::mat network, std::vector<std::string> terms, int n_actors, int n_proposals, int n_proposals_burn_in, int seed, int number_networks, std::vector<arma::mat>& data_list, std::vector<int>& type_list, arma::vec& beg_coef, int steps, bool mh, int max_it, double tol, bool start_with_empty_net);
RcppExport SEXP _ergm_sign_mle_estimation_stepping(SEXP networkSEXP, SEXP termsSEXP, SEXP n_actorsSEXP, SEXP n_proposalsSEXP, SEXP n_proposals_burn_inSEXP, SEXP seedSEXP, SEXP number_networksSEXP, SEXP data_listSEXP, SEXP type_listSEXP, SEXP beg_coefSEXP, SEXP stepsSEXP, SEXP mhSEXP, SEXP max_itSEXP, SEXP tolSEXP, SEXP start_with_empty_netSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type network(networkSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type terms(termsSEXP);
    Rcpp::traits::input_parameter< int >::type n_actors(n_actorsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals(n_proposalsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals_burn_in(n_proposals_burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type number_networks(number_networksSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat>& >::type data_list(data_listSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type type_list(type_listSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beg_coef(beg_coefSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< bool >::type mh(mhSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type start_with_empty_net(start_with_empty_netSEXP);
    rcpp_result_gen = Rcpp::wrap(mle_estimation_stepping(network, terms, n_actors, n_proposals, n_proposals_burn_in, seed, number_networks, data_list, type_list, beg_coef, steps, mh, max_it, tol, start_with_empty_net));
    return rcpp_result_gen;
END_RCPP
}
// t_mle_estimation_stepping
std::vector<arma::vec> t_mle_estimation_stepping(std::vector<arma::mat> networks, std::vector<std::string> terms, int n_actors, int n_proposals, int n_proposals_burn_in, int seed, int number_networks, std::vector<std::vector<arma::mat>>& data_lists, std::vector<int>& type_list, arma::vec& beg_coef, int steps, bool mh, int max_it, double tol, bool start_with_empty_net);
RcppExport SEXP _ergm_sign_t_mle_estimation_stepping(SEXP networksSEXP, SEXP termsSEXP, SEXP n_actorsSEXP, SEXP n_proposalsSEXP, SEXP n_proposals_burn_inSEXP, SEXP seedSEXP, SEXP number_networksSEXP, SEXP data_listsSEXP, SEXP type_listSEXP, SEXP beg_coefSEXP, SEXP stepsSEXP, SEXP mhSEXP, SEXP max_itSEXP, SEXP tolSEXP, SEXP start_with_empty_netSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type networks(networksSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type terms(termsSEXP);
    Rcpp::traits::input_parameter< int >::type n_actors(n_actorsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals(n_proposalsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals_burn_in(n_proposals_burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type number_networks(number_networksSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<arma::mat>>& >::type data_lists(data_listsSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type type_list(type_listSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beg_coef(beg_coefSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< bool >::type mh(mhSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type start_with_empty_net(start_with_empty_netSEXP);
    rcpp_result_gen = Rcpp::wrap(t_mle_estimation_stepping(networks, terms, n_actors, n_proposals, n_proposals_burn_in, seed, number_networks, data_lists, type_list, beg_coef, steps, mh, max_it, tol, start_with_empty_net));
    return rcpp_result_gen;
END_RCPP
}
// t_mle_estimation_stepping_p
std::vector<arma::vec> t_mle_estimation_stepping_p(std::vector<arma::mat> networks, std::vector<std::string> terms, int n_actors, int n_proposals, int n_proposals_burn_in, int seed, int number_networks, std::vector<std::vector<arma::mat>>& data_lists, std::vector<int>& type_list, arma::vec& beg_coef, int steps, bool mh, List cluster, List data_lists_par, List networks_par, int max_it, double tol, bool start_with_empty_net);
RcppExport SEXP _ergm_sign_t_mle_estimation_stepping_p(SEXP networksSEXP, SEXP termsSEXP, SEXP n_actorsSEXP, SEXP n_proposalsSEXP, SEXP n_proposals_burn_inSEXP, SEXP seedSEXP, SEXP number_networksSEXP, SEXP data_listsSEXP, SEXP type_listSEXP, SEXP beg_coefSEXP, SEXP stepsSEXP, SEXP mhSEXP, SEXP clusterSEXP, SEXP data_lists_parSEXP, SEXP networks_parSEXP, SEXP max_itSEXP, SEXP tolSEXP, SEXP start_with_empty_netSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type networks(networksSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type terms(termsSEXP);
    Rcpp::traits::input_parameter< int >::type n_actors(n_actorsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals(n_proposalsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals_burn_in(n_proposals_burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type number_networks(number_networksSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<arma::mat>>& >::type data_lists(data_listsSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type type_list(type_listSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beg_coef(beg_coefSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< bool >::type mh(mhSEXP);
    Rcpp::traits::input_parameter< List >::type cluster(clusterSEXP);
    Rcpp::traits::input_parameter< List >::type data_lists_par(data_lists_parSEXP);
    Rcpp::traits::input_parameter< List >::type networks_par(networks_parSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type start_with_empty_net(start_with_empty_netSEXP);
    rcpp_result_gen = Rcpp::wrap(t_mle_estimation_stepping_p(networks, terms, n_actors, n_proposals, n_proposals_burn_in, seed, number_networks, data_lists, type_list, beg_coef, steps, mh, cluster, data_lists_par, networks_par, max_it, tol, start_with_empty_net));
    return rcpp_result_gen;
END_RCPP
}
// t_mle_estimation_p
std::vector<arma::vec> t_mle_estimation_p(std::vector<arma::mat> networks, std::vector<std::string> terms, int n_actors, int n_proposals, int n_proposals_burn_in, int seed, int number_networks, std::vector<std::vector<arma::mat>>& data_lists, std::vector<int>& type_list, arma::vec& beg_coef, bool mh, List cluster, List data_lists_par, List networks_par, int max_it, double tol, bool start_with_empty_net);
RcppExport SEXP _ergm_sign_t_mle_estimation_p(SEXP networksSEXP, SEXP termsSEXP, SEXP n_actorsSEXP, SEXP n_proposalsSEXP, SEXP n_proposals_burn_inSEXP, SEXP seedSEXP, SEXP number_networksSEXP, SEXP data_listsSEXP, SEXP type_listSEXP, SEXP beg_coefSEXP, SEXP mhSEXP, SEXP clusterSEXP, SEXP data_lists_parSEXP, SEXP networks_parSEXP, SEXP max_itSEXP, SEXP tolSEXP, SEXP start_with_empty_netSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type networks(networksSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type terms(termsSEXP);
    Rcpp::traits::input_parameter< int >::type n_actors(n_actorsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals(n_proposalsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals_burn_in(n_proposals_burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type number_networks(number_networksSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<arma::mat>>& >::type data_lists(data_listsSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type type_list(type_listSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beg_coef(beg_coefSEXP);
    Rcpp::traits::input_parameter< bool >::type mh(mhSEXP);
    Rcpp::traits::input_parameter< List >::type cluster(clusterSEXP);
    Rcpp::traits::input_parameter< List >::type data_lists_par(data_lists_parSEXP);
    Rcpp::traits::input_parameter< List >::type networks_par(networks_parSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type start_with_empty_net(start_with_empty_netSEXP);
    rcpp_result_gen = Rcpp::wrap(t_mle_estimation_p(networks, terms, n_actors, n_proposals, n_proposals_burn_in, seed, number_networks, data_lists, type_list, beg_coef, mh, cluster, data_lists_par, networks_par, max_it, tol, start_with_empty_net));
    return rcpp_result_gen;
END_RCPP
}
// t_mle_estimation
std::vector<arma::vec> t_mle_estimation(std::vector<arma::mat> networks, std::vector<std::string> terms, int n_actors, int n_proposals, int n_proposals_burn_in, int seed, int number_networks, std::vector<std::vector<arma::mat>>& data_lists, std::vector<int>& type_list, arma::vec& beg_coef, bool mh, int max_it, double tol, bool start_with_empty_net);
RcppExport SEXP _ergm_sign_t_mle_estimation(SEXP networksSEXP, SEXP termsSEXP, SEXP n_actorsSEXP, SEXP n_proposalsSEXP, SEXP n_proposals_burn_inSEXP, SEXP seedSEXP, SEXP number_networksSEXP, SEXP data_listsSEXP, SEXP type_listSEXP, SEXP beg_coefSEXP, SEXP mhSEXP, SEXP max_itSEXP, SEXP tolSEXP, SEXP start_with_empty_netSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type networks(networksSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type terms(termsSEXP);
    Rcpp::traits::input_parameter< int >::type n_actors(n_actorsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals(n_proposalsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals_burn_in(n_proposals_burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type number_networks(number_networksSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<arma::mat>>& >::type data_lists(data_listsSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type type_list(type_listSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beg_coef(beg_coefSEXP);
    Rcpp::traits::input_parameter< bool >::type mh(mhSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type start_with_empty_net(start_with_empty_netSEXP);
    rcpp_result_gen = Rcpp::wrap(t_mle_estimation(networks, terms, n_actors, n_proposals, n_proposals_burn_in, seed, number_networks, data_lists, type_list, beg_coef, mh, max_it, tol, start_with_empty_net));
    return rcpp_result_gen;
END_RCPP
}
// t_est_var_p
List t_est_var_p(std::vector<arma::mat> networks, std::vector<std::string> terms, int n_actors, int n_proposals, int n_proposals_burn_in, int seed, int number_networks, std::vector<std::vector<arma::mat>>& data_lists, std::vector<int>& type_list, arma::vec& coef, bool mh, List cluster, List data_lists_par, List networks_par, bool start_with_empty_net);
RcppExport SEXP _ergm_sign_t_est_var_p(SEXP networksSEXP, SEXP termsSEXP, SEXP n_actorsSEXP, SEXP n_proposalsSEXP, SEXP n_proposals_burn_inSEXP, SEXP seedSEXP, SEXP number_networksSEXP, SEXP data_listsSEXP, SEXP type_listSEXP, SEXP coefSEXP, SEXP mhSEXP, SEXP clusterSEXP, SEXP data_lists_parSEXP, SEXP networks_parSEXP, SEXP start_with_empty_netSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type networks(networksSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type terms(termsSEXP);
    Rcpp::traits::input_parameter< int >::type n_actors(n_actorsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals(n_proposalsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals_burn_in(n_proposals_burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type number_networks(number_networksSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<arma::mat>>& >::type data_lists(data_listsSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type type_list(type_listSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< bool >::type mh(mhSEXP);
    Rcpp::traits::input_parameter< List >::type cluster(clusterSEXP);
    Rcpp::traits::input_parameter< List >::type data_lists_par(data_lists_parSEXP);
    Rcpp::traits::input_parameter< List >::type networks_par(networks_parSEXP);
    Rcpp::traits::input_parameter< bool >::type start_with_empty_net(start_with_empty_netSEXP);
    rcpp_result_gen = Rcpp::wrap(t_est_var_p(networks, terms, n_actors, n_proposals, n_proposals_burn_in, seed, number_networks, data_lists, type_list, coef, mh, cluster, data_lists_par, networks_par, start_with_empty_net));
    return rcpp_result_gen;
END_RCPP
}
// t_est_var
List t_est_var(std::vector<arma::mat> networks, std::vector<std::string> terms, int n_actors, int n_proposals, int n_proposals_burn_in, int seed, int number_networks, std::vector<std::vector<arma::mat>>& data_lists, std::vector<int>& type_list, arma::vec& coef, bool mh, bool start_with_empty_net);
RcppExport SEXP _ergm_sign_t_est_var(SEXP networksSEXP, SEXP termsSEXP, SEXP n_actorsSEXP, SEXP n_proposalsSEXP, SEXP n_proposals_burn_inSEXP, SEXP seedSEXP, SEXP number_networksSEXP, SEXP data_listsSEXP, SEXP type_listSEXP, SEXP coefSEXP, SEXP mhSEXP, SEXP start_with_empty_netSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type networks(networksSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type terms(termsSEXP);
    Rcpp::traits::input_parameter< int >::type n_actors(n_actorsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals(n_proposalsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals_burn_in(n_proposals_burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type number_networks(number_networksSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<arma::mat>>& >::type data_lists(data_listsSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type type_list(type_listSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< bool >::type mh(mhSEXP);
    Rcpp::traits::input_parameter< bool >::type start_with_empty_net(start_with_empty_netSEXP);
    rcpp_result_gen = Rcpp::wrap(t_est_var(networks, terms, n_actors, n_proposals, n_proposals_burn_in, seed, number_networks, data_lists, type_list, coef, mh, start_with_empty_net));
    return rcpp_result_gen;
END_RCPP
}
// t_rm_mle_estimation
std::vector<arma::vec> t_rm_mle_estimation(std::vector<arma::mat> networks, std::vector<std::string> terms, int n_actors, int n_proposals, int n_proposals_burn_in, int seed, int number_networks, std::vector<std::vector<arma::mat>>& data_lists, std::vector<int>& type_list, arma::vec& beg_coef, bool mh, arma::mat D, double c, int max_it, double tol, bool start_with_empty_net);
RcppExport SEXP _ergm_sign_t_rm_mle_estimation(SEXP networksSEXP, SEXP termsSEXP, SEXP n_actorsSEXP, SEXP n_proposalsSEXP, SEXP n_proposals_burn_inSEXP, SEXP seedSEXP, SEXP number_networksSEXP, SEXP data_listsSEXP, SEXP type_listSEXP, SEXP beg_coefSEXP, SEXP mhSEXP, SEXP DSEXP, SEXP cSEXP, SEXP max_itSEXP, SEXP tolSEXP, SEXP start_with_empty_netSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type networks(networksSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type terms(termsSEXP);
    Rcpp::traits::input_parameter< int >::type n_actors(n_actorsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals(n_proposalsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals_burn_in(n_proposals_burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type number_networks(number_networksSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<arma::mat>>& >::type data_lists(data_listsSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type type_list(type_listSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beg_coef(beg_coefSEXP);
    Rcpp::traits::input_parameter< bool >::type mh(mhSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type start_with_empty_net(start_with_empty_netSEXP);
    rcpp_result_gen = Rcpp::wrap(t_rm_mle_estimation(networks, terms, n_actors, n_proposals, n_proposals_burn_in, seed, number_networks, data_lists, type_list, beg_coef, mh, D, c, max_it, tol, start_with_empty_net));
    return rcpp_result_gen;
END_RCPP
}
// est_var
List est_var(arma::mat network, std::vector<std::string> terms, int n_actors, int n_proposals, int n_proposals_burn_in, int seed, int number_networks, std::vector<arma::mat>& data_list, std::vector<int>& type_list, arma::vec coef, bool mh, bool start_with_empty_net);
RcppExport SEXP _ergm_sign_est_var(SEXP networkSEXP, SEXP termsSEXP, SEXP n_actorsSEXP, SEXP n_proposalsSEXP, SEXP n_proposals_burn_inSEXP, SEXP seedSEXP, SEXP number_networksSEXP, SEXP data_listSEXP, SEXP type_listSEXP, SEXP coefSEXP, SEXP mhSEXP, SEXP start_with_empty_netSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type network(networkSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type terms(termsSEXP);
    Rcpp::traits::input_parameter< int >::type n_actors(n_actorsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals(n_proposalsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals_burn_in(n_proposals_burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type number_networks(number_networksSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat>& >::type data_list(data_listSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type type_list(type_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< bool >::type mh(mhSEXP);
    Rcpp::traits::input_parameter< bool >::type start_with_empty_net(start_with_empty_netSEXP);
    rcpp_result_gen = Rcpp::wrap(est_var(network, terms, n_actors, n_proposals, n_proposals_burn_in, seed, number_networks, data_list, type_list, coef, mh, start_with_empty_net));
    return rcpp_result_gen;
END_RCPP
}
// rm_mle_estimation
std::vector<arma::vec> rm_mle_estimation(arma::mat network, std::vector<std::string> terms, int n_actors, int n_proposals, int n_proposals_burn_in, int seed, int number_networks, std::vector<arma::mat>& data_list, std::vector<int>& type_list, arma::vec& beg_coef, bool mh, arma::mat D, double c, int max_it, double tol, bool start_with_empty_net);
RcppExport SEXP _ergm_sign_rm_mle_estimation(SEXP networkSEXP, SEXP termsSEXP, SEXP n_actorsSEXP, SEXP n_proposalsSEXP, SEXP n_proposals_burn_inSEXP, SEXP seedSEXP, SEXP number_networksSEXP, SEXP data_listSEXP, SEXP type_listSEXP, SEXP beg_coefSEXP, SEXP mhSEXP, SEXP DSEXP, SEXP cSEXP, SEXP max_itSEXP, SEXP tolSEXP, SEXP start_with_empty_netSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type network(networkSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type terms(termsSEXP);
    Rcpp::traits::input_parameter< int >::type n_actors(n_actorsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals(n_proposalsSEXP);
    Rcpp::traits::input_parameter< int >::type n_proposals_burn_in(n_proposals_burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type number_networks(number_networksSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat>& >::type data_list(data_listSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type type_list(type_listSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beg_coef(beg_coefSEXP);
    Rcpp::traits::input_parameter< bool >::type mh(mhSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type start_with_empty_net(start_with_empty_netSEXP);
    rcpp_result_gen = Rcpp::wrap(rm_mle_estimation(network, terms, n_actors, n_proposals, n_proposals_burn_in, seed, number_networks, data_list, type_list, beg_coef, mh, D, c, max_it, tol, start_with_empty_net));
    return rcpp_result_gen;
END_RCPP
}
// preprocess_pseudo_lh_new
List preprocess_pseudo_lh_new(arma::mat network, int n_actors, std::vector<std::string> terms, std::vector<arma::mat>& data_list, std::vector<int>& type_list);
RcppExport SEXP _ergm_sign_preprocess_pseudo_lh_new(SEXP networkSEXP, SEXP n_actorsSEXP, SEXP termsSEXP, SEXP data_listSEXP, SEXP type_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type network(networkSEXP);
    Rcpp::traits::input_parameter< int >::type n_actors(n_actorsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type terms(termsSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat>& >::type data_list(data_listSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type type_list(type_listSEXP);
    rcpp_result_gen = Rcpp::wrap(preprocess_pseudo_lh_new(network, n_actors, terms, data_list, type_list));
    return rcpp_result_gen;
END_RCPP
}
// count_dyadwise_shared_partner_pos
arma::vec count_dyadwise_shared_partner_pos(arma::mat network, int n_actors);
RcppExport SEXP _ergm_sign_count_dyadwise_shared_partner_pos(SEXP networkSEXP, SEXP n_actorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type network(networkSEXP);
    Rcpp::traits::input_parameter< int >::type n_actors(n_actorsSEXP);
    rcpp_result_gen = Rcpp::wrap(count_dyadwise_shared_partner_pos(network, n_actors));
    return rcpp_result_gen;
END_RCPP
}
// count_edgewise_shared_partner_pos
arma::vec count_edgewise_shared_partner_pos(arma::mat network, int n_actors, int n_edges);
RcppExport SEXP _ergm_sign_count_edgewise_shared_partner_pos(SEXP networkSEXP, SEXP n_actorsSEXP, SEXP n_edgesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type network(networkSEXP);
    Rcpp::traits::input_parameter< int >::type n_actors(n_actorsSEXP);
    Rcpp::traits::input_parameter< int >::type n_edges(n_edgesSEXP);
    rcpp_result_gen = Rcpp::wrap(count_edgewise_shared_partner_pos(network, n_actors, n_edges));
    return rcpp_result_gen;
END_RCPP
}
// count_edgewise_shared_enemies
arma::vec count_edgewise_shared_enemies(arma::mat network, int n_actors, int n_edges);
RcppExport SEXP _ergm_sign_count_edgewise_shared_enemies(SEXP networkSEXP, SEXP n_actorsSEXP, SEXP n_edgesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type network(networkSEXP);
    Rcpp::traits::input_parameter< int >::type n_actors(n_actorsSEXP);
    Rcpp::traits::input_parameter< int >::type n_edges(n_edgesSEXP);
    rcpp_result_gen = Rcpp::wrap(count_edgewise_shared_enemies(network, n_actors, n_edges));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ergm_sign_mat_to_map", (DL_FUNC) &_ergm_sign_mat_to_map, 3},
    {"_ergm_sign_trying_out", (DL_FUNC) &_ergm_sign_trying_out, 2},
    {"_ergm_sign_set_seed", (DL_FUNC) &_ergm_sign_set_seed, 1},
    {"_ergm_sign_simulate_numbers", (DL_FUNC) &_ergm_sign_simulate_numbers, 3},
    {"_ergm_sign_arma_sample", (DL_FUNC) &_ergm_sign_arma_sample, 3},
    {"_ergm_sign_sample_signed", (DL_FUNC) &_ergm_sign_sample_signed, 2},
    {"_ergm_sign_simulate_networks_new", (DL_FUNC) &_ergm_sign_simulate_networks_new, 11},
    {"_ergm_sign_simulate_networks_stats", (DL_FUNC) &_ergm_sign_simulate_networks_stats, 10},
    {"_ergm_sign_simulate_trying", (DL_FUNC) &_ergm_sign_simulate_trying, 10},
    {"_ergm_sign_count_global", (DL_FUNC) &_ergm_sign_count_global, 5},
    {"_ergm_sign_trying_again2", (DL_FUNC) &_ergm_sign_trying_again2, 8},
    {"_ergm_sign_simulation_mat", (DL_FUNC) &_ergm_sign_simulation_mat, 10},
    {"_ergm_sign_count_global_terms", (DL_FUNC) &_ergm_sign_count_global_terms, 5},
    {"_ergm_sign_mle_estimation", (DL_FUNC) &_ergm_sign_mle_estimation, 14},
    {"_ergm_sign_mle_estimation_stepping", (DL_FUNC) &_ergm_sign_mle_estimation_stepping, 15},
    {"_ergm_sign_t_mle_estimation_stepping", (DL_FUNC) &_ergm_sign_t_mle_estimation_stepping, 15},
    {"_ergm_sign_t_mle_estimation_stepping_p", (DL_FUNC) &_ergm_sign_t_mle_estimation_stepping_p, 18},
    {"_ergm_sign_t_mle_estimation_p", (DL_FUNC) &_ergm_sign_t_mle_estimation_p, 17},
    {"_ergm_sign_t_mle_estimation", (DL_FUNC) &_ergm_sign_t_mle_estimation, 14},
    {"_ergm_sign_t_est_var_p", (DL_FUNC) &_ergm_sign_t_est_var_p, 15},
    {"_ergm_sign_t_est_var", (DL_FUNC) &_ergm_sign_t_est_var, 12},
    {"_ergm_sign_t_rm_mle_estimation", (DL_FUNC) &_ergm_sign_t_rm_mle_estimation, 16},
    {"_ergm_sign_est_var", (DL_FUNC) &_ergm_sign_est_var, 12},
    {"_ergm_sign_rm_mle_estimation", (DL_FUNC) &_ergm_sign_rm_mle_estimation, 16},
    {"_ergm_sign_preprocess_pseudo_lh_new", (DL_FUNC) &_ergm_sign_preprocess_pseudo_lh_new, 5},
    {"_ergm_sign_count_dyadwise_shared_partner_pos", (DL_FUNC) &_ergm_sign_count_dyadwise_shared_partner_pos, 2},
    {"_ergm_sign_count_edgewise_shared_partner_pos", (DL_FUNC) &_ergm_sign_count_edgewise_shared_partner_pos, 3},
    {"_ergm_sign_count_edgewise_shared_enemies", (DL_FUNC) &_ergm_sign_count_edgewise_shared_enemies, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_ergm_sign(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
